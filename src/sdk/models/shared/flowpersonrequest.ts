/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { IamPersonV2 } from "./iampersonv2";
import { Expose, Transform, Type } from "class-transformer";

export class FlowPersonRequestFlowVariables extends SpeakeasyBase {}

/**
 * Contains the data used for person creation (if it does not exist) or partial update (if it exists)
 */
export class FlowPersonRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FlowPersonRequestFlowVariables })
    @Expose({ name: "flowVariables" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, FlowPersonRequestFlowVariables> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], FlowPersonRequestFlowVariables);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    flowVariables?: Record<string, FlowPersonRequestFlowVariables>;

    @SpeakeasyMetadata()
    @Expose({ name: "personData" })
    @Type(() => IamPersonV2)
    personData: IamPersonV2;
}
